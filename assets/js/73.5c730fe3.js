(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{588:function(t,s,a){"use strict";a.r(s);var e=a(8),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("相信关于字符编码,大家应该都有所耳闻.多多少少也都能叫出一些名词,像什么 "),a("code",[t._v("utf-8")]),t._v(" , "),a("code",[t._v("ASCII")]),t._v(" , "),a("code",[t._v("Unicode")]),t._v(" 等.刚好这两天整理笔记的时候,翻到了之前做过一些有关字符编码的笔记,那就索性和大家一起回顾下相关内容喽.")])]),t._v(" "),a("h2",{attrs:{id:"编码和解码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码和解码"}},[t._v("#")]),t._v(" 编码和解码")]),t._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("首先在了解各种字符编码格式和标准之前,我们先来理解下编码和解码的概念."),a("code",[t._v("编码(encode)")]),t._v(" 是信息按照一定的规则从一种形式或格式转换为另一种形式的过程,而 "),a("code",[t._v("解码(decode)")]),t._v("则是一个编码的逆转换过程.编码解码都是有一套预先规定的方案,无论是在编码过程还是解码过程,都要遵守这套规则来运算.比如 A 和 B 两个人之间约定,"),a("code",[t._v("1代表我.2表示喜欢,3代表不喜欢,4代表你")]),t._v(".当有一天 A 给 B 发送"),a("code",[t._v("124")]),t._v("的时候,B 就明白了 A 的心意,然后给 A 回了一个"),a("code",[t._v("134")]),t._v(".这里信息在传输的过程中,就是使用的 1234 数字来表示.从"),a("code",[t._v("我喜欢你")]),t._v("到"),a("code",[t._v("124")]),t._v("的过程,就可以称之为编码,而当 B 收到了"),a("code",[t._v("124")]),t._v("之后,将其转换为"),a("code",[t._v("我喜欢你")]),t._v(" 文字的过程,就是解码. 在完成来回两次编码和解码的过程后,一个悲伤的故事就诞生了.")]),t._v(" "),a("p",[t._v("而在我们平时的开发过程中,编码和解码也是一个绕不开的话题.很多地方我们都会涉及到编码解码.且不同的编码解码在不同的场景中具有不同的意义.比如常见的字符编码解码,URL 编码解码等.")]),t._v(" "),a("h3",{attrs:{id:"为什要编码解码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什要编码解码"}},[t._v("#")]),t._v(" 为什要编码解码")]),t._v(" "),a("p",[t._v("那么可能有童鞋要问了,为什么我们进行编码和解码,让它原本是什么样子就什么样子不好嘛?当然是不好,这是因为在计算机中,是不能存储字符的,只能存储 0 和 1 两个数字.不管什么字符,都需要先转换成使用 0 和 1 表达的数字后才能储存到计算机中.说白了就是一句话,计算机是采用二进制计算的,而二进制不是就只有 0 和 1 嘛.至于计算机为什么采用二进制,有很多原因.在这里简单的说几点,在技术上易实现,因为我们可以使用双稳态电路来表示 1 和 0,高电平为 1,低电平为 0.且因为只有 1 和 0,所以在传输和处理的过程中不容易出错.另外二进制的运算规则也相对来说简单.综合各方面因素,最终计算机采用二进制.当程序员编写高级开发语言的时候,如 C 语言等,通过计算机编码将其转化为计算机能识别的机器语言.这样既可以方便程序员编写代码,又能让系统稳定快速的计算运行.")]),t._v(" "),a("h3",{attrs:{id:"乱码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乱码"}},[t._v("#")]),t._v(" 乱码")]),t._v(" "),a("p",[t._v("乱码就是因为使用了不对应的字符集导致部分或所有字符没法被正确阅读.就比如我告诉你,打开新华字典的 xx 页的 xx 行,就是我想对你说的话.结果你拿了本牛津英汉字典,那你当然不能正确获取到我想对你说的话.")]),t._v(" "),a("h2",{attrs:{id:"ascii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ascii"}},[t._v("#")]),t._v(" ASCII")]),t._v(" "),a("p",[a("code",[t._v("ASCII")]),t._v(" 码表的全称是 "),a("code",[t._v("American Standard Code for Information Interchange")]),t._v(" ,中文名叫美国信息交换标准代码,是基于拉丁字母的一套电脑编码系统,主要用于显示现代英语和其他西欧语言.在五十多年前就已经发布了,后面更新过,但是最近的一版都已经是三十多年前了.其使用了 7 个二进制数字来表示一个字符,共定义了 128 个字符,从 "),a("code",[t._v("00000000 - 01111111")]),t._v(".这里为什么是 128 个字符呢?这是因为当时的那个年代,基础设施还很不完善,硬件条件也不行.为了节省空间,他们约定使用一个字节来保存字符编号.而一个字节(byte)是 8 位(bit),除去最高位符号位,剩下的 7 位,即"),a("code",[t._v("0000000")]),t._v(" 到 "),a("code",[t._v("1111111")]),t._v(" ,这 2 的 7 次方,共 128 位就拿来使用了.下面这是我从百度 down 下来的图片.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLTEyNTcyMzM0MTcuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL0FTQ0lJLnBuZw?x-oss-process=image/format,png",alt:"ASCII"}}),t._v("\n从图中可以看出,所有字符主要分为了 "),a("code",[t._v("控制字符")]),t._v(" 和 "),a("code",[t._v("打印字符")]),t._v(".至于控制字符这块内容,我就没用到过,大家看看就好了.而打印字符就是我们平时会用到的东西了.看着这张表,大家是不是发现了几组比较熟悉的数字.十进制 48-57 对应的字符 0 到 9,65-90 对应的大写字母 A 到 Z,97 到-122 对应的小写字母 a 到 z.我们先来看看下面的代码:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 48")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 97")]),t._v("\n")])])]),a("p",[a("code",[t._v("charCodeAt")]),t._v(" 方法可以返回指定位置的字符的 "),a("code",[t._v("Unicode")]),t._v(" 编码,这个返回值是 "),a("code",[t._v("0 - 65535")]),t._v(" 之间的整数.而在 JS 中, "),a("code",[t._v("ASCII")]),t._v(" 编码值和 "),a("code",[t._v("Unicode")]),t._v(" 是一样的.所以这里返回的结果和我们上图中对应起来了.而在实际开发中,有时候我们需要判断一个字符是否是小写英文的时候,就可以使用这个方法.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" charCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("charCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" charCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("当然了,喜欢正则的同学直接使用正则表达式 "),a("code",[t._v("/^[a-z]$/")]),t._v(" 也是可以的,还更加方便.")]),t._v(" "),a("h2",{attrs:{id:"gb2312"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gb2312"}},[t._v("#")]),t._v(" GB2312")]),t._v(" "),a("p",[t._v("前面说到了老美发明了"),a("code",[t._v("ASCII")]),t._v("码表,可是随着计算机系统的越来越流行,全世界的人都开始使用计算机.但是世界上有好多国家不是基于拉丁字母语系的.就比如我们博大精深的汉字,自古以来就有仓颉造字的故事流传下来.汉字发展至今,文化底蕴深厚,影响源远流长.区区"),a("code",[t._v("ASCII")]),t._v(" 并不能表示中文,于是乎,中国人就有了自己的编码.一个字节只能表示 2 的 7 次方,那我们中文使用 2 个字节来表示,那可以表示的范围不是就变成了 2 的 15 次方,即 32768,足足比 "),a("code",[t._v("ASCII")]),t._v(" 码可以表示的范围高了 256 倍.于是这个国人自己定制的最早标准就叫做 "),a("code",[t._v("GB2312")]),t._v(" ,在上世纪 80 年,由国家标准总局发布.虽然当时可以表示的范围有几万个,但是 "),a("code",[t._v("GB2312")]),t._v(" 并没有收录那么多的汉字和标点符号.只是把一些常用的收录进来,这也是为什么以前有些办事机构打印不出某些生僻字的原因.当然了,因为老美先发明了 "),a("code",[t._v("ASCII")]),t._v(" 而中国后有的 "),a("code",[t._v("GB2312")]),t._v(" 标准,所以我们的 "),a("code",[t._v("GB2312")]),t._v(" 在一定程度上是兼容 "),a("code",[t._v("ASCII")]),t._v(" 码表的,即我们的 0 到 127 位是被保留下来的.")]),t._v(" "),a("h2",{attrs:{id:"gbk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gbk"}},[t._v("#")]),t._v(" GBK")]),t._v(" "),a("p",[a("code",[t._v("GBK")]),t._v(" 编码标准其实就是 "),a("code",[t._v("GB2312")]),t._v(" 的升级版了,因为前面说到了,在原先的 "),a("code",[t._v("GB2312")]),t._v(" 中只有几千个常用汉字和字符,打印不出那些生僻字.所以为了解决这个问题,新的 "),a("code",[t._v("GBK")]),t._v(" 标准在上世纪 90 年代中发布了,比起之前的增加了 2 万多个汉字.下面是我从 GBK 编码表中随便找的一段,大家看看是不是有很多的字不认识,笑哭 😂.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLTEyNTcyMzM0MTcuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL0dCSy5wbmc?x-oss-process=image/format,png",alt:"GBK"}})]),t._v(" "),a("h2",{attrs:{id:"gb18030"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gb18030"}},[t._v("#")]),t._v(" GB18030")]),t._v(" "),a("p",[t._v("在 GBK 之后,又陆陆续续的发布了几个版本,如 "),a("code",[t._v("GB18030-2000")]),t._v(" 和 "),a("code",[t._v("GB18030-2005")]),t._v(" 等.统称为 "),a("code",[t._v("GB18030")]),t._v(" ,中文叫 "),a("code",[t._v("信息技术 中文编码字符集")]),t._v(".其对"),a("code",[t._v("GB 2312-1980")]),t._v("完全向后兼容,与 GBK 基本向后兼容，并支持"),a("code",[t._v("Unicode（GB 13000）")]),t._v("的所有码位.共计收录汉字 70244 个.")]),t._v(" "),a("h2",{attrs:{id:"unicode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode"}},[t._v("#")]),t._v(" Unicode")]),t._v(" "),a("p",[t._v("随着计算机的推广,越来越多的国家使用上了计算机.又因为大家的语系不同,为了表示自己国家的语言,于是大家都制定了自己的编码格式,你一套,我一套,这在刚开始的单机世界并没有什么问题,大家各自玩各自的,也不需要和别人通信.但是随着互联网的浪潮兴起,人与人之间,计算机与计算机之间的通信就成为一个必不可少的过程了.可是此时人们却尴尬的发现,因为前期大家各自玩自己的,也只管收录自己用的到的.于是便导致各种标准满天飞,却没有一个可以通用的,像 "),a("code",[t._v("ASCII")]),t._v(" 肯定就没法表示汉字.于是出现了 "),a("code",[t._v("Unicode")]),t._v(" (又称统一码、万国码、单一码),包括字符集、编码方案等.它为每种语言中的每个字符设定了统一并且唯一的二进制编码,以满足跨语言、跨平台进行文本转换、处理的要求.1990 年开始研发,1994 年正式公布.注意了,"),a("code",[t._v("Unicode")]),t._v(" 是采用的双字节对字符进行编码,即无论是一个英文还是中文,无论是英文标点还是中文标点,都是占据两个字节.")]),t._v(" "),a("p",[t._v("在前面我们提到过的 "),a("code",[t._v("charCodeAt")]),t._v(" 方法,返回的就是 "),a("code",[t._v("Unicode")]),t._v(".我们在之前的代码中已经测试数字和字母.现在我们再来测试下汉字")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'哈'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 21704")]),t._v("\n")])])]),a("p",[t._v("那么 "),a("code",[t._v("21704")]),t._v(" 就是 "),a("code",[t._v("张")]),t._v(" 这个字符的"),a("code",[t._v("Unicode")]),t._v(" 数值了.")]),t._v(" "),a("h2",{attrs:{id:"utf-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utf-8"}},[t._v("#")]),t._v(" UTF-8")]),t._v(" "),a("p",[t._v("讲完了 "),a("code",[t._v("Unicode")]),t._v(" 之后,我们终于可以来说 "),a("code",[t._v("utf-8")]),t._v(" 了.关于这两者的关系,简单的来说就是 "),a("code",[t._v("Unicode")]),t._v(" 是字符集,本身只规定了每个字符的数字编号是多少,并没有规定这个编号如何存储.而 "),a("code",[t._v("utf-8")]),t._v(" 是编码规则.再说的通俗点,前者是个标准,后者是个方案,是个具体的实现.其实不止 "),a("code",[t._v("utf-8")]),t._v(" 这么一种方案,还有 "),a("code",[t._v("utf-16")]),t._v(" 和 "),a("code",[t._v("utf-32")]),t._v(" 等.不过至于后面这两方案,使用的并不多.因为它们有比较明显的缺点,像 "),a("code",[t._v("utf-16")]),t._v(" 规定了必须用 2 个或 4 个字节,而 "),a("code",[t._v("utf-32")]),t._v(" 则是用 4 个字节总 32 位去表示 "),a("code",[t._v("Unicode")]),t._v(".所以它们没法兼容一个字节的 "),a("code",[t._v("ASCII")]),t._v("码, 而且占用的空间还大,那要它们有何用.")]),t._v(" "),a("p",[t._v("因此 "),a("code",[t._v("utf-8")]),t._v(" 才是目前使用最为广泛对 "),a("code",[t._v("Unicode")]),t._v(" 支持最好的一种编码方式了.它的一个很明显的特点就是在编码过程中,它会使用不同的字节数量来表示一个字符.像原本的 "),a("code",[t._v("ASCII")]),t._v(" 码,是用一个字节表示的,那现在还用一个字节来表示,做到了兼容.但是关于汉字,原先我们使用两个字节来表示,而现在的 "),a("code",[t._v("utf-8")]),t._v(" 则是使用了三个字节.")]),t._v(" "),a("p",[t._v("总而言之, "),a("code",[t._v("utf-8")]),t._v(" 是现在最为优秀的字符编码方案了.很多时候,我们在编写代码的时候,我们会声明我们代码的字符编码格式是 "),a("code",[t._v("utf-8")]),t._v("的.比如在 html 文件的头部声明 "),a("code",[t._v('<meta charset="UTF-8">')]),t._v(" ,在 py 文件的头部声明 "),a("code",[t._v("# coding=utf-8")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"编码规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码规则"}},[t._v("#")]),t._v(" 编码规则")]),t._v(" "),a("ol",[a("li",[t._v("对于单字节的符号,字节的第一位设为 0,后面 7 位为这个符号的 "),a("code",[t._v("Unicode")]),t._v(" 码.因此对于英语字母,"),a("code",[t._v("UTF-8")]),t._v(" 编码和 "),a("code",[t._v("ASCII")]),t._v(" 码是相同的")]),t._v(" "),a("li",[t._v("对于 n 字节的符号（n > 1）,第一个字节的前 n 位都设为 1,第 n + 1 位设为 0,后面字节的前两位一律设为 10.剩下的没有提及的二进制位,全部为这个符号的 "),a("code",[t._v("Unicode")]),t._v(" 码.")])]),t._v(" "),a("p",[t._v("下面我们转换一个 "),a("code",[t._v("张")]),t._v(" 字,使用 "),a("code",[t._v("utf-8")]),t._v(" 的格式来表示.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 24352")]),t._v("\n")])])]),a("p",[t._v("通过 "),a("code",[t._v("charCodeAt")]),t._v(" 方法获取 "),a("code",[t._v("张")]),t._v(" 的 "),a("code",[t._v("Unicode")]),t._v(" 数值为 "),a("code",[t._v("24352")]),t._v(" ,将其转换为 16 进制,结果为 "),a("code",[t._v("0x5f20")]),t._v(" .我们去一个"),a("a",{attrs:{href:"http://tool.chinaz.com/tools/unicode.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线编码解码的工具网站"),a("OutboundLink")],1),t._v(" 将 "),a("code",[t._v("张")]),t._v(" 进行字符串编码,结果为 "),a("code",[t._v("\\u5f20")]),t._v(" ,和我们前面的对应上了.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLTEyNTcyMzM0MTcuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL3VuaWNvZGVfemhhbmcucG5n?x-oss-process=image/format,png",alt:"zhang"}})]),t._v(" "),a("p",[t._v("接下来继续转换,"),a("code",[t._v("5f20")]),t._v(" 分别将每个数字转为二进制,结果为:"),a("code",[t._v("0101 1111 0010 0000")]),t._v(".再运用上面的编码规则 2,一个汉字为 3 个字节,所以 n 为 3.第一个字节的前 3 位都设为 1,第 4 位设为 0.那么结果就是 "),a("code",[t._v("1110xxxx 10xxxxxx 10xxxxxx")]),t._v(" ,这里的 xxx 等是剩下的没有提及的二进制位,用 "),a("code",[t._v("Unicode")]),t._v(" 码(即 "),a("code",[t._v("0101 1111 0010 0000")]),t._v(") 来填充.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0101 1111 0010 0000  # 从右往左,依次填入呀.\n1110xxxx 10xxxxxx 10xxxxxx  # 最后一个x用上面最后一个数字0替换,倒数第二个x用上面倒数第二个数字0替换,以此类推.\n11100101 10111100 10100000 # 填充完的二进制\ne5 bc a0 # 将二进制转为16进制后 ,结果为 e5 bc a0 注意这个结果,我们后面还会遇到.\n")])])]),a("p",[t._v("注:不会进制转换的童鞋可以使用"),a("a",{attrs:{href:"https://tool.lu/hexconvert/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线转换"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"url-编码解码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-编码解码"}},[t._v("#")]),t._v(" URL 编码解码")]),t._v(" "),a("p",[t._v("不知道大家有没有注意到一个现象,当我们在 Chrome 浏览器地址栏的 url 后面加上一个 query 字符串的时候,如下图所示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLTEyNTcyMzM0MTcuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL3VybF9xdWVyeS5wbmc?x-oss-process=image/format,png",alt:"url_query"}})]),t._v(" "),a("p",[t._v("我输入的是 "),a("code",[t._v("name=张三")]),t._v(" .而当我复制了这个 url,新开一个页面把刚刚复制的地址黏贴过去的时候")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9nLTEyNTcyMzM0MTcuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL3VybF9xdWVyeTIucG5n?x-oss-process=image/format,png",alt:"url_query"}})]),t._v(" "),a("p",[t._v("原本的中文字符 "),a("code",[t._v("张三")]),t._v(" 变成了一堆看不懂的字符串 "),a("code",[t._v("%E5%BC%A0%E4%B8%89")]),t._v(" .这是因为这个字符串已经被浏览器进行了相对应的编码.附上一个网站 "),a("a",{attrs:{href:"http://www.jsons.cn/urlencode/",target:"_blank",rel:"noopener noreferrer"}},[t._v("URL 编码/解码"),a("OutboundLink")],1),t._v(",大家可以把这一长串字符串复制进去解码看看效果.这是因为现在大部分的浏览器中的字符都被当作 "),a("code",[t._v("utf-8")]),t._v(" 处理了.而中文的 "),a("code",[t._v("utf-8")]),t._v(" 编码,是一个汉字等于三个字节,也就是三组 "),a("code",[t._v("%xx")]),t._v(", 即 "),a("code",[t._v("%xx%xx%xx")]),t._v(".看到这里是不是又有点眼熟了.没错,这里 url 编码后的"),a("code",[t._v("张")]),t._v(" 正是 "),a("code",[t._v("%E5%BC%A0")]),t._v(" ,这个和我们上面提到填充完的二进制转换为十六进制的编码结果是一致的.")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("关于字符编码的知识其实是蛮多的,我在这边只是提了下最简单的一些概念而已.大家有兴趣的可以自己去了解下.对了,推荐个书吧,以前看过的一本书,但是貌似没看完( 😂 ),英文名叫 "),a("code",[t._v("code")]),t._v(" ,中文名叫 "),a("code",[t._v("编码")]),t._v(",有兴趣的童鞋可以去看看呀.")]),t._v(" "),a("p",[t._v("参考链接:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/ASCII/309296",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://baike.baidu.com/item/ASCII/309296"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/gb18030/3204518",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://baike.baidu.com/item/gb18030/3204518"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/Unicode/750500",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://baike.baidu.com/item/Unicode/750500"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/yingshukun/article/details/91347405",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/yingshukun/article/details/91347405"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/zhusongziye/article/details/84261211",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/zhusongziye/article/details/84261211"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);